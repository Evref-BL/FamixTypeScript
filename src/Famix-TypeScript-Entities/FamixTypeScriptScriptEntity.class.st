"
## Relations
======================

### Outgoing dependencies
| Relation | Origin | Opposite | Type | Comment |
|---|
| `accesses` | `FamixTWithAccesses` | `accessor` | `FamixTAccess` | Accesses to variables made by this behaviour.|
| `outgoingInvocations` | `FamixTWithInvocations` | `sender` | `FamixTInvocation` | Outgoing invocations sent by this behaviour.|
| `outgoingReferences` | `FamixTWithReferences` | `referencer` | `FamixTReference` | References from this entity to other entities.|

### Other
| Relation | Origin | Opposite | Type | Comment |
|---|
| `sourceAnchor` | `FamixTSourceEntity` | `element` | `FamixTSourceAnchor` | SourceAnchor entity linking to the original source code for this entity|


## Properties
======================

| Name | Type | Default value | Comment |
|---|
| `isStub` | `Boolean` | false | Flag true if the entity attributes are incomplete, either because the entity is missing or not imported.|

"
Class {
	#name : 'FamixTypeScriptScriptEntity',
	#superclass : 'FamixTypeScriptScopingEntity',
	#traits : 'FamixTWithStatements',
	#classTraits : 'FamixTWithStatements classTrait',
	#category : 'Famix-TypeScript-Entities-Entities',
	#package : 'Famix-TypeScript-Entities',
	#tag : 'Entities'
}

{ #category : 'meta' }
FamixTypeScriptScriptEntity class >> annotation [

	<FMClass: #ScriptEntity super: #FamixTypeScriptScopingEntity>
	<package: #FamixTypeScript>
	<generated>
	^ self
]

{ #category : 'visitor' }
FamixTypeScriptScriptEntity >> accept: aVisitor [

	<generated>
	^ aVisitor visitFamixTypeScriptScriptEntity: self
]
